
Analisis empirico de distintos algoritmos para la ordenacion de vectores.

Autor:
- Emilio Martínez Varela

Introduccion:
 En esta segunda practica analizaremos los tiempos de dos algoritmos de 
ordenacion implementados en C: el algortimo de ordenación shell y 
el algoritmo de ordenacion por inserción. Los vectores a ordenar seran generados 
de manera aleatoria, en orden ascendente(ya ordenado) y en orden descendente 
(ordenado inversamente).


Maquina utilizada para la medicion de tiempos:
- CPU: Procesador Intel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz, 2592 Mhz
- RAM: 8 Gb
- Sistema Operativo: Ubuntu 18.04.1 LTS


Analisis de tiempos y complejidad de los algoritmos:
 * Tiempos medidos en microsegundos
 * En t(n), '*' indica que el tiempo no se calculo con una ejecucion del 
algoritmo, sino con la media de K ejecuciones ya que el tiempo de una es 
demasiado bajo (< 500 microsegundos). Asi obtenemos un tiempo mas 
preciso. En concreto utilizamos k=10000 para ambos algoritmos cuando 
fuese necesario.


-------------------------------------------------------------------------
Analisis ordenacion por insercion:

Tabla tiempos - Insercion - Aleatorio

------------------------------------------------------------------------
   	  n 		 t(n) 		 	t(n)/n^1.7 	 t(n)/n^2 	 t(n)/n^2.3
------------------------------------------------------------------------
*       500 	165.639 	 	0.0042748 	 0.0006626 	 0.0001027 
       1000 	637.000 	 	0.0050599 	 0.0006370 	 0.0000802 
       2000 	2557.000 	 	0.0062514 	 0.0006392 	 0.0000654 
       4000 	10383.000 	 	0.0078131 	 0.0006489 	 0.0000539 
       8000 	41276.000 	 	0.0095597 	 0.0006449 	 0.0000435 
      16000 	163662.000 		0.0116666 	 0.0006393 	 0.0000350 
      32000 	660335.000 		0.0144880 	 0.0006449 	 0.0000287 
      64000 	2614559.000 	0.0176560 	 0.0006383 	 0.0000231 
     128000 	10493160.000 	0.0218097 	 0.0006405 	 0.0000188 

Cotas utilizadas:
	Cota superior = n^1.7
	Cota inferior = n^2
	Cota ajustada =	n^2.3
	
Como se puede observar en la tabla, tomamos como cota n^1.7 
la division tiende a 0, por lo que es una cota sobrestimada.
Tomando como cota n^2 la division tiende a infinito, por lo que esta es
una cota subestimada.Tomando como cota n^2.3 la division tiende a una
constante C = 0.0006, por lo que determinamos que esta ultima es la cota ajustada.

-------------------------------------------------------------------------

Tabla tiempos - Insercion - Ascendente

------------------------------------------------------------------------------
   	  n 		 	t(n) 		 t(n)/n^0.87 	t(n)/n*1.85 	t(n)/n^1.35
------------------------------------------------------------------------------
*       500 		 1.74100 	 0.0078108 	 	0.0018822 	 	0.0003955 
*      1000 		 3.47700 	 0.0085350 	 	0.0018795 	 	0.0003099 
*      2000 		 6.96600 	 0.0093559 	 	0.0018827 	 	0.0002436 
*      4000 		 14.00200 	 0.0102896 	 	0.0018922 	 	0.0001920 
*      8000 		 27.89900 	 0.0112176 	 	0.0018851 	 	0.0001501 
*     16000 		 55.70300 	 0.0122545 	 	0.0018819 	 	0.0001176 
*     32000 		 111.66300 	 0.0134409 	 	0.0018862 	 	0.0000925 
*     64000 		 223.71700 	 0.0147341 	 	0.0018895 	 	0.0000727 
*    128000 		 447.43300 	 0.0161234 	 	0.0018895 	 	0.0000570

Cota superior = n^0.87 -> Cota sobreestimada
Cota inferior = n*1.85 -> Cota subestimada
Cota ajustada = n^1.35 Tiende a C = 0.0018


-------------------------------------------------------------------------

Tabla tiempos - Insercion - Descendente

------------------------------------------------------------------------
   	  n 		 t(n) 		 	t(n)/n^1.8 	 t(n)/n^2 	 t(n)/n^2.3
------------------------------------------------------------------------
*       500 	324.425 	 	0.0044975 	 0.0012977 	 0.0002011 
       1000 	1288.000 	 	0.0051276 	 0.0012880 	 0.0001621 
       2000 	5160.000 	 	0.0058992 	 0.0012900 	 0.0001319 
       4000 	20859.000 	 	0.0068483 	 0.0013037 	 0.0001083 
       8000 	83254.000 	 	0.0078495 	 0.0013008 	 0.0000878 
      16000 	331296.000 	 	0.0089702 	 0.0012941 	 0.0000709 
      32000 	1330932.000 	0.0103487 	 0.0012997 	 0.0000579 
      64000 	5342704.000 	0.0119299 	 0.0013044 	 0.0000472 
     128000 	21216761.000 	0.0136051 	 0.0012950 	 0.0000380

Cota superior = n^1.8 -> Cota sobreestimada
Cota inferior = n^2 -> Cota subestimada
Cota ajustada = n^2.3 -> Tiende a C = 0.0012-0.0013


-------------------------------------------------------------------------
-------------------------------------------------------------------------
Analisis Shell:

Tabla tiempos - Shell - Aleatorio

---------------------------------------------------------------------------
   	  n 			 t(n) 		 t(n)/n^1.05 	 t(n)/n^2 	 t(n)/n^1.8
---------------------------------------------------------------------------
*       500 		 53.663 	 0.0786605 	 	0.0309678 	 	0.0007439 
*      1000 		 123.425 	 0.0873782 	 	0.0310030 	 	0.0004914 
*      2000 		 283.478 	 0.0969255 	 	0.0309944 	 	0.0003241 
       4000 		 649.000 	 0.1071721 	 	0.0308868 	 	0.0002131 
       8000 		 1444.000 	 0.1151656 	 	0.0299129 	 	0.0001361 
      16000 		 3333.000 	 0.1283835 	 	0.0300532 	 	0.0000902 
      32000 		 7876.000 	 0.1465204 	 	0.0309119 	 	0.0000612 
      64000 		 17591.000 	 0.1580526 	 	0.0300521 	 	0.0000393 
     128000 		 40455.000 	 0.1755504 	 	0.0300829 	 	0.0000259

Cota superior = n^1.05 -> Cota sobreestimada
Cota inferior = n^2 -> Cota subestimada
Cota ajustada = n^1.8 -> Tiende a C = 0.030



-------------------------------------------------------------------------

Tabla tiempos - Shell - Ascendente

------------------------------------------------------------------------
   	  n 		 	t(n) 		 t(n)/n^0.9 	 t(n)/n^2 	 t(n)/n^1.6
------------------------------------------------------------------------
*       500 		 15.246 	 0.0567653 	 	0.0135089 	 0.0007325 
*      1000 		 34.554 	 0.0689443 	 	0.0139797 	 0.0005476 
*      2000 		 76.717 	 0.0820285 	 	0.0141719 	 0.0004011 
*      4000 		 169.894 	 0.0973473 	 	0.0143301 	 0.0002930 
*      8000 		 373.446 	 0.1146692 		0.0143825 	 0.0002125 
      16000 		 820.000 	 0.1349292 	 	0.0144196 	 0.0001539 
      32000 		 1776.000 	 0.1566058 	 	0.0142600 	 0.0001100 
      64000 		 3827.000 	 0.1808408 	 	0.0140304 	 0.0000782 
     128000 		 8235.000 	 0.2085329 	 	0.0137851 	 0.0000555 

Cota superior = n^0.9 -> Cota sobreestimada
Cota inferior = n^2 -> Cota subestimada
Cota ajustada = n^1.6 -> Tiende a C = 0.0143


-------------------------------------------------------------------------

Tabla tiempos - Shell - Descendente

------------------------------------------------------------------------
   	  n 		 	t(n) 		 t(n)/n^0.9 	 t(n)/n^2 	 t(n)/n^1.7
------------------------------------------------------------------------
*       500 		 22.585 	 0.0840905 	 	0.0214276 	 0.0005829 
*      1000 		 49.295 	 0.0983565 	 	0.0215180 	 0.0003916 
*      2000 		 110.762 	 0.1184306 	 	0.0222452 	 0.0002708 
*      4000 		 240.688 	 0.1379115 	 	0.0222406 	 0.0001811 
       8000 		 525.000 	 0.1612049 	 	0.0223202 	 0.0001216 
      16000 		 1159.000 	 0.1907109 	 	0.0226709 	 0.0000826 
      32000 		 2506.000 	 0.2209765 	 	0.0225535 	 0.0000550 
      64000 		 5377.000 	 0.2540844 	 	0.0222648 	 0.0000363 
     128000 		 11828.000 	 0.2995176 	 	0.0225339 	 0.0000246

Cota superior = n^0.9 -> Cota sobreestimada
Cota inferior = n^2 -> Cota subestimada
Cota ajustada = n^1.7 -> Tiende a C = 0.0223


-------------------------------------------------------------------------
Conclusiones:
Observamos que la ordenacion por insercion es generalmente lenta, con una 
complejidad cuadratica (n^2). Unicamente es un algoritmo rapido cuando 
"ordenamos" un algoritmo ya ordenado, en ese caso su complejidad es lineal 
( el tiempo que tarde en recorrer el vector).

Y la ordenación shell es un algoritmo rapido cuando "ordenamos" de manera 
ascendente.

Podemos declarar que la ordenacion shell es mejor, en general, que la 
inserción ( la inserción solo es mas rapida cuando el vector viene ya ordenado).

Las cotas analizadas empiricamente corresponden, en su gran medida, a las 
esperadas con un analisis teorico de la complejidad.

-------------------------------------------------------------------------
Anomalias:
* 
